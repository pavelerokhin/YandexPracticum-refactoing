"""
–§–∞–π–ª ecommerce.py
–¶–µ–ª—å: –ø–æ–∫–∞–∑–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ ¬´–∂–∏–≤—ã–µ¬ª code smells –¥–ª—è –∫—É—Ä—Å–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.

–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ code smells:
1. Long Method (generate_report)
2. Duplicate Code (total_price, grand_total, calculate_shipping)
3. Feature Envy (DiscountHelper, ShippingCalculator)
4. Large Class (Customer)
5. Primitive Obsession (—Å—Ç–∞—Ç—É—Å—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, —Ç–∏–ø—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–∞–∫ —á–∏—Å–ª–∞)
6. Switch Statements (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–æ–º)
7. Magic Numbers –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
8. God Class —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ (Order –¥–µ–ª–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ)
9. Long Parameter List
10. Data Class (Product)
"""

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–¥–µ üôÉ
TAX_RATE = 0.20
LOYALTY_DISCOUNT = 0.05
FREE_SHIPPING_THRESHOLD = 100.0
PREMIUM_CUSTOMER_TYPE = 1
GOLD_CUSTOMER_TYPE = 2
REGULAR_CUSTOMER_TYPE = 0


# ‚Äï‚Äï‚Äï Data Class (—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ, –Ω–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è) ‚Äï‚Äï‚Äï
class Product:
    def __init__(self, name: str, price: float, category: str, weight: float):
        self.name = name
        self.price = price
        self.category = category  # —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ enum - Primitive Obsession
        self.weight = weight


# ‚Äï‚Äï‚Äï Large Class - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ ‚Äï‚Äï‚Äï
class Customer:
    """
    –î–µ–ª–∞–µ—Ç –≤—Å—ë: —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç, —Å—á–∏—Ç–∞–µ—Ç —Å–∫–∏–¥–∫–∏...
    """
    def __init__(self, customer_id: int, name: str, email: str,
                 customer_type: int, total_spent: float, orders_count: int):
        self.customer_id = customer_id
        self.name = name
        self.email = email
        self.customer_type = customer_type  # Primitive Obsession - —á–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ enum
        self.total_spent = total_spent
        self.orders_count = orders_count
        self.address = ""
        self.phone = ""
        self.registration_date = None
        self.last_login = None
        self.preferences = {}

    # Validation logic - –Ω–µ –ø–æ SRP
    def is_valid_email(self):
        return "@" in self.email and "." in self.email

    def is_valid_phone(self):
        return len(self.phone.replace("-", "").replace(" ", "")) >= 10

    # Formatting logic - –Ω–µ –ø–æ SRP
    def get_display_name(self):
        if self.customer_type == 2:  # Magic Number
            return f"ü•á {self.name}"
        elif self.customer_type == 1:  # Magic Number
            return f"‚≠ê {self.name}"
        else:
            return self.name

    # Business logic - –Ω–µ –ø–æ SRP
    def get_loyalty_multiplier(self):
        if self.customer_type == 2:  # Gold - Magic Number
            return 0.15
        elif self.customer_type == 1:  # Premium - Magic Number
            return 0.10
        else:
            return 0.05

    def can_get_free_shipping(self):
        return self.customer_type >= 1  # Magic Number

    # Data access logic - –Ω–µ –ø–æ SRP
    def update_spent_amount(self, amount: float):
        self.total_spent += amount
        self.orders_count += 1


# ‚Äï‚Äï‚Äï God Class —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ - Order –¥–µ–ª–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ‚Äï‚Äï‚Äï
class Order:
    def __init__(self, customer_id: int):
        self.customer_id = customer_id
        self.items: list[Product] = []
        self.status = "OPEN"  # Primitive Obsession - —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ enum
        self.shipping_address = ""
        self.notes = ""
        self.created_at = None
        self.updated_at = None

    def add_item(self, product: Product, quantity: int = 1):
        # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç quantity –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        for _ in range(quantity):
            self.items.append(product)

    # ‚Äï‚Äï‚Äï Duplicate Code ‚Ññ1 ‚Äï‚Äï‚Äï
    def total_price(self):
        total = 0
        for p in self.items:
            total += p.price
        return total

    # ‚Äï‚Äï‚Äï Duplicate Code ‚Ññ2 (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞, –¥—Ä—É–≥–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è) ‚Äï‚Äï‚Äï
    def grand_total(self):
        s = 0
        for p in self.items:
            s += p.price
        return s

    # ‚Äï‚Äï‚Äï Duplicate Code ‚Ññ3 (–ø–æ—Ö–æ–∂–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞) ‚Äï‚Äï‚Äï
    def calculate_shipping(self):
        total_weight = 0
        for p in self.items:
            total_weight += p.weight

        base_price = 0
        for p in self.items:  # –û–ø—è—Ç—å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ items
            base_price += p.price

        if base_price > 100:  # Magic Number –≤–º–µ—Å—Ç–æ FREE_SHIPPING_THRESHOLD
            return 0
        elif total_weight < 1:
            return 5.99  # Magic Number
        elif total_weight < 5:
            return 9.99  # Magic Number
        else:
            return 15.99  # Magic Number

    # Switch Statement - –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–æ–º
    def get_status_display(self):
        if self.status == "OPEN":
            return "üìù Open"
        elif self.status == "PROCESSING":
            return "‚öôÔ∏è Processing"
        elif self.status == "SHIPPED":
            return "üöö Shipped"
        elif self.status == "DELIVERED":
            return "‚úÖ Delivered"
        elif self.status == "CANCELLED":
            return "‚ùå Cancelled"
        else:
            return "‚ùì Unknown"

    def can_be_cancelled(self):
        return self.status in ["OPEN", "PROCESSING"]

    def can_be_modified(self):
        return self.status == "OPEN"


# ‚Äï‚Äï‚Äï Feature Envy - –ª–µ–∑–µ—Ç –≤ —á—É–∂–∏–µ –¥–∞–Ω–Ω—ã–µ ‚Äï‚Äï‚Äï
class DiscountHelper:
    """
    –î–æ–ª–∂–µ–Ω —Å—á–∏—Ç–∞—Ç—å —Å–∫–∏–¥–∫–∏, –Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ª–µ–∑–µ—Ç –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤.
    """
    def calc_loyalty_discount(self, order: Order, customer: Customer) -> float:
        # –¢—è–Ω–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ order –∏ customer –≤–º–µ—Å—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö –∑–Ω–∞—á–∏–π
        num_items = len(order.items)
        base_price = order.total_price()
        customer_multiplier = customer.get_loyalty_multiplier()

        # –î—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –∏–∑ Customer
        if customer.customer_type == 2:  # Magic Number
            minimum_items = 1
        elif customer.customer_type == 1:  # Magic Number
            minimum_items = 2
        else:
            minimum_items = 3

        return base_price * customer_multiplier if num_items >= minimum_items else 0.0

    def calc_bulk_discount(self, order: Order) -> float:
        # Feature Envy - –æ–ø—è—Ç—å –ª–µ–∑–µ—Ç –≤ order.items
        category_counts = {}
        for item in order.items:
            if item.category not in category_counts:
                category_counts[item.category] = 0
            category_counts[item.category] += 1

        discount = 0
        for category, count in category_counts.items():
            if count >= 5:  # Magic Number
                discount += count * 2.5  # Magic Number
        return discount


# ‚Äï‚Äï‚Äï –ï—â—ë –æ–¥–∏–Ω Feature Envy ‚Äï‚Äï‚Äï
class ShippingCalculator:
    def calculate_advanced_shipping(self, order: Order, customer: Customer) -> float:
        # –î—É–±–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ Order.calculate_shipping –Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
        total_weight = 0
        for p in order.items:
            total_weight += p.weight

        base_price = 0
        for p in order.items:
            base_price += p.price

        # Feature Envy - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç internal knowledge –æ customer
        if customer.can_get_free_shipping() and base_price > 50:  # Magic Number
            return 0

        if customer.customer_type == 2:  # Magic Number
            return max(0, total_weight * 1.5 - 5)  # Magic Number
        elif customer.customer_type == 1:  # Magic Number
            return total_weight * 2.0  # Magic Number
        else:
            return total_weight * 2.5 + 3.99  # Magic Numbers


# ‚Äï‚Äï‚Äï Long Method + –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è SRP ‚Äï‚Äï‚Äï
class Analytics:
    def generate_comprehensive_report(self, orders: list[Order], customers: dict[int, Customer]) -> dict:
        """
        100+ —Å—Ç—Ä–æ–∫ –º–æ–Ω—Å—Ç—Ä-–º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –í–°–Å:
        - –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
        - —Å–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        - –≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω
        - –≤–∞–ª–∏–¥–∞—Ü–∏—é
        - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        """
        # Long Parameter List –±—ã–ª–æ –±—ã –µ—â—ë —Ö—É–∂–µ, –Ω–æ –ø–æ–∫–∞ –æ–±–æ–π–¥—ë–º—Å—è
        report = {
            "total_orders": len(orders),
            "total_revenue_net": 0.0,
            "total_revenue_gross": 0.0,
            "total_shipping": 0.0,
            "total_discounts": 0.0,
            "top_customers": {},
            "avg_items_per_order": 0.0,
            "categories_stats": {},
            "customer_segments": {"gold": 0, "premium": 0, "regular": 0},
            "shipping_analysis": {},
            "debug_log": [],
            "warnings": []
        }

        total_items = 0
        discount_helper = DiscountHelper()
        shipping_calc = ShippingCalculator()

        # ‚Äï‚Äï‚Äï –ë–ª–æ–∫ 1: –æ—Å–Ω–æ–≤–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ) ‚Äï‚Äï‚Äï
        for order in orders:
            # Duplicate Code - —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞, —á—Ç–æ –≤ Order
            net_price = 0
            for item in order.items:
                net_price += item.price

            tax_amount = net_price * 0.2  # Magic Number –¥—É–±–ª–∏—Ä—É–µ—Ç TAX_RATE
            gross_price = net_price + tax_amount

            report["total_revenue_net"] += net_price
            report["total_revenue_gross"] += gross_price
            total_items += len(order.items)

            # ‚Äï‚Äï‚Äï –ë–ª–æ–∫ 2: –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äï‚Äï‚Äï
            customer = customers.get(order.customer_id)
            if customer:
                shipping_cost = shipping_calc.calculate_advanced_shipping(order, customer)
                report["total_shipping"] += shipping_cost

                # Customer segmentation —Å Magic Numbers
                if customer.customer_type == 2:
                    report["customer_segments"]["gold"] += 1
                elif customer.customer_type == 1:
                    report["customer_segments"]["premium"] += 1
                else:
                    report["customer_segments"]["regular"] += 1

            # ‚Äï‚Äï‚Äï –ë–ª–æ–∫ 3: —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç—ã (–º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –≤—ã–Ω–µ—Å—Ç–∏) ‚Äï‚Äï‚Äï
            cid = order.customer_id
            if cid not in report["top_customers"]:
                report["top_customers"][cid] = {
                    "revenue": 0,
                    "orders": 0,
                    "avg_order": 0
                }
            report["top_customers"][cid]["revenue"] += gross_price
            report["top_customers"][cid]["orders"] += 1

            # ‚Äï‚Äï‚Äï –ë–ª–æ–∫ 4: –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ ‚Äï‚Äï‚Äï
            for item in order.items:
                cat = item.category
                if cat not in report["categories_stats"]:
                    report["categories_stats"][cat] = {
                        "count": 0,
                        "revenue": 0,
                        "avg_price": 0
                    }
                report["categories_stats"][cat]["count"] += 1
                report["categories_stats"][cat]["revenue"] += item.price

            # ‚Äï‚Äï‚Äï –ë–ª–æ–∫ 5: —Å–∫–∏–¥–∫–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äï‚Äï‚Äï
            if customer:
                loyalty_discount = discount_helper.calc_loyalty_discount(order, customer)
                bulk_discount = discount_helper.calc_bulk_discount(order)
                total_discount = loyalty_discount + bulk_discount
                report["total_discounts"] += total_discount

                # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ –Ω—É–∂–Ω–æ –≤ production)
                log_entry = (
                    f"[Customer: {customer.name}] "
                    f"Order: {len(order.items)} items, "
                    f"Net: ‚Ç¨{net_price:.2f}, "
                    f"Gross: ‚Ç¨{gross_price:.2f}, "
                    f"Shipping: ‚Ç¨{shipping_cost:.2f}, "
                    f"Discount: ‚Ç¨{total_discount:.2f}, "
                    f"Status: {order.status}"
                )
                report["debug_log"].append(log_entry)

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–µ –º–µ—Å—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –∑–¥–µ—Å—å)
                if not customer.is_valid_email():
                    report["warnings"].append(f"Invalid email for customer {customer.name}")
                if not customer.is_valid_phone():
                    report["warnings"].append(f"Invalid phone for customer {customer.name}")

        # ‚Äï‚Äï‚Äï –ë–ª–æ–∫ 6: –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è ‚Äï‚Äï‚Äï
        if orders:
            report["avg_items_per_order"] = round(total_items / len(orders), 2)

        # –î–æ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for cat_stats in report["categories_stats"].values():
            if cat_stats["count"] > 0:
                cat_stats["avg_price"] = round(
                    cat_stats["revenue"] / cat_stats["count"], 2
                )

        # –î–æ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
        for customer_stats in report["top_customers"].values():
            if customer_stats["orders"] > 0:
                customer_stats["avg_order"] = round(
                    customer_stats["revenue"] / customer_stats["orders"], 2
                )

        # ‚Äï‚Äï‚Äï –ë–ª–æ–∫ 7: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–º–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏) ‚Äï‚Äï‚Äï
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ
        report["top_customers"] = dict(
            sorted(
                report["top_customers"].items(),
                key=lambda kv: kv[1]["revenue"],
                reverse=True
            )
        )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        report["categories_stats"] = dict(
            sorted(
                report["categories_stats"].items(),
                key=lambda kv: kv[1]["count"],
                reverse=True
            )
        )

        # ‚Äï‚Äï‚Äï –ë–ª–æ–∫ 8: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ (–Ω–∞—Ä—É—à–µ–Ω–∏–µ SRP) ‚Äï‚Äï‚Äï
        print("=" * 50)
        print("üìä COMPREHENSIVE E-COMMERCE REPORT")
        print("=" * 50)
        print(f"üì¶ Total Orders: {report['total_orders']}")
        print(f"üí∞ Revenue (Net): ‚Ç¨{report['total_revenue_net']:.2f}")
        print(f"üí∞ Revenue (Gross): ‚Ç¨{report['total_revenue_gross']:.2f}")
        print(f"üöö Shipping Revenue: ‚Ç¨{report['total_shipping']:.2f}")
        print(f"üéÅ Discounts Given: ‚Ç¨{report['total_discounts']:.2f}")
        print(f"üìà Avg Items/Order: {report['avg_items_per_order']}")

        print("\nüèÜ TOP CUSTOMERS (by revenue):")
        for i, (cid, stats) in enumerate(list(report["top_customers"].items())[:5]):
            customer_name = customers[cid].get_display_name() if cid in customers else f"Customer {cid}"
            print(f"  {i+1}. {customer_name}: ‚Ç¨{stats['revenue']:.2f} ({stats['orders']} orders)")

        print("\nüìä CATEGORY PERFORMANCE:")
        for cat, stats in list(report["categories_stats"].items())[:5]:
            print(f"  {cat}: {stats['count']} items, ‚Ç¨{stats['revenue']:.2f} revenue")

        print(f"\nüë• CUSTOMER SEGMENTS:")
        print(f"  ü•á Gold: {report['customer_segments']['gold']}")
        print(f"  ‚≠ê Premium: {report['customer_segments']['premium']}")
        print(f"  üë§ Regular: {report['customer_segments']['regular']}")

        if report["warnings"]:
            print(f"\n‚ö†Ô∏è  WARNINGS ({len(report['warnings'])}):")
            for warning in report["warnings"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                print(f"  - {warning}")

        print("=" * 50)

        return report


# ‚Äï‚Äï‚Äï Primitive Obsession –ø—Ä–∏–º–µ—Ä ‚Äï‚Äï‚Äï
class OrderProcessor:
    """
    –†–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–æ–≤-–∑–Ω–∞—á–µ–Ω–∏–π
    """
    def process_payment(self, amount: float, currency: str, payment_method: str,
                       card_number: str, expiry: str, cvv: str) -> bool:
        # Long Parameter List + –≤—Å—ë –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã
        # –î–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã –±—ã—Ç—å Money, PaymentMethod, CreditCard objects

        if currency == "EUR":  # Switch statement
            tax_rate = 0.20
        elif currency == "USD":
            tax_rate = 0.08
        elif currency == "GBP":
            tax_rate = 0.18
        else:
            return False

        if payment_method == "CREDIT":  # –µ—â—ë –æ–¥–∏–Ω switch
            fee = amount * 0.029  # Magic Number
        elif payment_method == "DEBIT":
            fee = amount * 0.019  # Magic Number
        elif payment_method == "PAYPAL":
            fee = amount * 0.034 + 0.30  # Magic Numbers
        else:
            return False

        # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–æ–≤
        if len(card_number.replace(" ", "")) != 16:
            return False
        if len(cvv) not in [3, 4]:
            return False

        return True


# ‚Äï‚Äï‚Äï –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äï‚Äï‚Äï
if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç—ã
    book = Product("Python Programming", 45.99, "books", 0.5)
    laptop = Product("Gaming Laptop", 899.99, "electronics", 2.1)
    pen = Product("Premium Pen", 12.99, "office", 0.1)
    backpack = Product("Travel Backpack", 79.99, "accessories", 0.8)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    customers = {
        101: Customer(101, "Alice Johnson", "alice@email.com", GOLD_CUSTOMER_TYPE, 1500.0, 12),
        102: Customer(102, "Bob Smith", "bob@email.com", PREMIUM_CUSTOMER_TYPE, 800.0, 6),
        103: Customer(103, "Carol Davis", "carol@invalid-email", REGULAR_CUSTOMER_TYPE, 150.0, 2)
    }

    # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑—ã
    order1 = Order(101)
    order1.add_item(laptop, 1)
    order1.add_item(backpack, 1)
    order1.status = "DELIVERED"

    order2 = Order(102)
    order2.add_item(book, 2)
    order2.add_item(pen, 3)
    order2.status = "SHIPPED"

    order3 = Order(103)
    order3.add_item(pen, 1)
    order3.status = "PROCESSING"

    order4 = Order(101)  # Alice –¥–µ–ª–∞–µ—Ç –µ—â—ë –æ–¥–∏–Ω –∑–∞–∫–∞–∑
    order4.add_item(book, 5)  # bulk purchase
    order4.status = "OPEN"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    analytics = Analytics()
    report = analytics.generate_comprehensive_report([order1, order2, order3, order4], customers)

    print(f"\nGenerated {len(report['debug_log'])} debug entries")
    print(f"Found {len(report['warnings'])} data quality issues")