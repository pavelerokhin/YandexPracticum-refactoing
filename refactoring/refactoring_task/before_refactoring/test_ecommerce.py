"""
test_ecommerce.py
Unit tests –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.
–≠—Ç–∏ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –¥–æ –∏ –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è
—á—Ç–æ –º—ã –Ω–µ —Å–ª–æ–º–∞–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É.
"""

import unittest
from io import StringIO
from unittest.mock import patch

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ ecommerce.py –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
try:
    from refactoring.refactoring_task.before_refactoring.ecommerce import (
        Product, Order, Customer, DiscountHelper, ShippingCalculator,
        Analytics, OrderProcessor,
        TAX_RATE, LOYALTY_DISCOUNT, FREE_SHIPPING_THRESHOLD,
        PREMIUM_CUSTOMER_TYPE, GOLD_CUSTOMER_TYPE, REGULAR_CUSTOMER_TYPE
    )
except ImportError as e:
    print("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª ecommerce.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ.")
    print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e}")
    exit(1)


class TestProductAndOrder(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Product –∏ Order"""

    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        self.product1 = Product("Book", 25.0, "books", 0.3)
        self.product2 = Product("Pen", 5.0, "office", 0.1)
        self.order = Order(customer_id=123)

    def test_product_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        self.assertEqual(self.product1.name, "Book")
        self.assertEqual(self.product1.price, 25.0)
        self.assertEqual(self.product1.category, "books")
        self.assertEqual(self.product1.weight, 0.3)

    def test_order_add_items(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑"""
        self.order.add_item(self.product1, 2)
        self.order.add_item(self.product2, 1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–∏–ª–∏—Å—å (—Å —É—á—ë—Ç–æ–º –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ quantity)
        self.assertEqual(len(self.order.items), 3)  # 2 –∫–Ω–∏–≥–∏ + 1 —Ä—É—á–∫–∞
        self.assertEqual(self.order.customer_id, 123)
        self.assertEqual(self.order.status, "OPEN")

    def test_order_total_price_methods(self):
        """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –ø–æ–¥—Å—á—ë—Ç–∞ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–≤–∫–ª—é—á–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥)"""
        self.order.add_item(self.product1, 2)  # 2 * 25 = 50
        self.order.add_item(self.product2, 1)  # 1 * 5 = 5
        # –ò—Ç–æ–≥–æ: 55

        # –û–±–∞ –º–µ—Ç–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ duplicate code)
        total1 = self.order.total_price()
        total2 = self.order.grand_total()

        self.assertEqual(total1, 55.0)
        self.assertEqual(total2, 55.0)
        self.assertEqual(total1, total2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ duplicate code —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ

    def test_order_shipping_calculation(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        # –ó–∞–∫–∞–∑ –º–µ–Ω—å—à–µ FREE_SHIPPING_THRESHOLD
        self.order.add_item(self.product2, 1)  # 5.0, weight 0.1
        shipping = self.order.calculate_shipping()
        self.assertEqual(shipping, 5.99)  # light weight, low price

        # –ó–∞–∫–∞–∑ –±–æ–ª—å—à–µ FREE_SHIPPING_THRESHOLD
        expensive_product = Product("Laptop", 150.0, "electronics", 2.0)
        order2 = Order(456)
        order2.add_item(expensive_product, 1)
        shipping2 = order2.calculate_shipping()
        self.assertEqual(shipping2, 0)  # free shipping over 100

    def test_order_status_display(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        self.assertEqual(self.order.get_status_display(), "üìù Open")

        self.order.status = "SHIPPED"
        self.assertEqual(self.order.get_status_display(), "üöö Shipped")

        self.order.status = "UNKNOWN_STATUS"
        self.assertEqual(self.order.get_status_display(), "‚ùì Unknown")

    def test_order_status_permissions(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        # OPEN –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å
        self.order.status = "OPEN"
        self.assertTrue(self.order.can_be_cancelled())
        self.assertTrue(self.order.can_be_modified())

        # SHIPPED –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å
        self.order.status = "SHIPPED"
        self.assertFalse(self.order.can_be_cancelled())
        self.assertFalse(self.order.can_be_modified())


class TestCustomerFunctionality(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Large Class Customer –∏ –µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"""

    def setUp(self):
        self.regular_customer = Customer(1, "John Doe", "john@email.com",
                                         REGULAR_CUSTOMER_TYPE, 100.0, 5)
        self.premium_customer = Customer(2, "Jane Smith", "jane@email.com",
                                         PREMIUM_CUSTOMER_TYPE, 500.0, 10)
        self.gold_customer = Customer(3, "Bob Gold", "bob@email.com",
                                      GOLD_CUSTOMER_TYPE, 2000.0, 25)

    def test_customer_email_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email (—á–∞—Å—Ç—å Large Class –ø—Ä–æ–±–ª–µ–º—ã)"""
        self.assertTrue(self.regular_customer.is_valid_email())

        invalid_customer = Customer(99, "Invalid", "invalid-email",
                                    REGULAR_CUSTOMER_TYPE, 0, 0)
        self.assertFalse(invalid_customer.is_valid_email())

    def test_customer_phone_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        self.regular_customer.phone = "123-456-7890"
        self.assertTrue(self.regular_customer.is_valid_phone())

        self.regular_customer.phone = "123"
        self.assertFalse(self.regular_customer.is_valid_phone())

    def test_customer_display_names(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º—ë–Ω (–µ—â—ë –æ–¥–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å Large Class)"""
        self.assertEqual(self.regular_customer.get_display_name(), "John Doe")
        self.assertEqual(self.premium_customer.get_display_name(), "‚≠ê Jane Smith")
        self.assertEqual(self.gold_customer.get_display_name(), "ü•á Bob Gold")

    def test_customer_loyalty_multipliers(self):
        """–¢–µ—Å—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (—Ç–æ–∂–µ –≤ Large Class)"""
        self.assertEqual(self.regular_customer.get_loyalty_multiplier(), 0.05)
        self.assertEqual(self.premium_customer.get_loyalty_multiplier(), 0.10)
        self.assertEqual(self.gold_customer.get_loyalty_multiplier(), 0.15)

    def test_customer_free_shipping_eligibility(self):
        """–¢–µ—Å—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É"""
        self.assertFalse(self.regular_customer.can_get_free_shipping())
        self.assertTrue(self.premium_customer.can_get_free_shipping())
        self.assertTrue(self.gold_customer.can_get_free_shipping())

    def test_customer_update_spent_amount(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π —Å—É–º–º—ã"""
        initial_spent = self.regular_customer.total_spent
        initial_orders = self.regular_customer.orders_count

        self.regular_customer.update_spent_amount(50.0)

        self.assertEqual(self.regular_customer.total_spent, initial_spent + 50.0)
        self.assertEqual(self.regular_customer.orders_count, initial_orders + 1)


class TestDiscountsAndShipping(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Feature Envy –∫–ª–∞—Å—Å—ã DiscountHelper –∏ ShippingCalculator"""

    def setUp(self):
        self.discount_helper = DiscountHelper()
        self.shipping_calc = ShippingCalculator()

        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.product = Product("Test Product", 30.0, "test", 1.0)
        self.order = Order(customer_id=1)
        self.order.add_item(self.product, 3)  # 3 items, total 90.0

        self.regular_customer = Customer(1, "John", "john@email.com",
                                         REGULAR_CUSTOMER_TYPE, 100.0, 5)
        self.premium_customer = Customer(2, "Jane", "jane@email.com",
                                         PREMIUM_CUSTOMER_TYPE, 500.0, 10)

    def test_loyalty_discount_calculation(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á—ë—Ç–∞ —Å–∫–∏–¥–∫–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (Feature Envy)"""
        # Regular customer needs 3+ items for discount
        discount = self.discount_helper.calc_loyalty_discount(self.order, self.regular_customer)
        expected = 90.0 * 0.05  # base_price * regular_multiplier
        self.assertEqual(discount, expected)

        # Premium customer needs 2+ items
        discount_premium = self.discount_helper.calc_loyalty_discount(self.order, self.premium_customer)
        expected_premium = 90.0 * 0.10
        self.assertEqual(discount_premium, expected_premium)

    def test_bulk_discount_calculation(self):
        """–¢–µ—Å—Ç —Å–∫–∏–¥–∫–∏ –∑–∞ –æ–ø—Ç–æ–≤—É—é –ø–æ–∫—É–ø–∫—É"""
        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —Å 5+ —Ç–æ–≤–∞—Ä–∞–º–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        bulk_order = Order(customer_id=1)
        for _ in range(6):  # 6 —Ç–æ–≤–∞—Ä–æ–≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            bulk_order.add_item(self.product, 1)

        discount = self.discount_helper.calc_bulk_discount(bulk_order)
        expected = 6 * 2.5  # count * magic_number
        self.assertEqual(discount, expected)

    def test_advanced_shipping_calculation(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (Feature Envy)"""
        # Regular customer
        shipping = self.shipping_calc.calculate_advanced_shipping(self.order, self.regular_customer)
        expected = 3.0 * 2.5 + 3.99  # total_weight * rate + base
        self.assertEqual(shipping, expected)

        # Premium customer with free shipping eligibility
        expensive_order = Order(customer_id=2)
        expensive_product = Product("Expensive", 60.0, "luxury", 1.0)
        expensive_order.add_item(expensive_product, 1)

        shipping_premium = self.shipping_calc.calculate_advanced_shipping(expensive_order, self.premium_customer)
        self.assertEqual(shipping_premium, 0)  # Free shipping


class TestAnalyticsReporting(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Long Method –≤ Analytics –∫–ª–∞—Å—Å–µ"""

    def setUp(self):
        self.analytics = Analytics()

        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.products = [
            Product("Book", 25.0, "books", 0.5),
            Product("Pen", 5.0, "office", 0.1),
            Product("Laptop", 500.0, "electronics", 2.0)
        ]

        self.customers = {
            101: Customer(101, "Alice", "alice@email.com", GOLD_CUSTOMER_TYPE, 1000.0, 10),
            102: Customer(102, "Bob", "bob@email.com", REGULAR_CUSTOMER_TYPE, 200.0, 3)
        }

        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑—ã
        self.orders = []

        order1 = Order(101)
        order1.add_item(self.products[0], 2)  # 2 books = 50
        order1.add_item(self.products[1], 1)  # 1 pen = 5
        order1.status = "DELIVERED"
        self.orders.append(order1)

        order2 = Order(102)
        order2.add_item(self.products[2], 1)  # 1 laptop = 500
        order2.status = "SHIPPED"
        self.orders.append(order2)

    @patch('sys.stdout', new_callable=StringIO)
    def test_comprehensive_report_generation(self, mock_stdout):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ comprehensive report (Long Method)"""
        report = self.analytics.generate_comprehensive_report(self.orders, self.customers)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.assertEqual(report["total_orders"], 2)
        self.assertEqual(report["total_revenue_net"], 555.0)  # 55 + 500

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ gross revenue –≤–∫–ª—é—á–∞–µ—Ç –Ω–∞–ª–æ–≥–∏
        expected_gross = 555.0 * 1.2  # —Å –Ω–∞–ª–æ–≥–æ–º 20%
        self.assertAlmostEqual(report["total_revenue_gross"], expected_gross, places=2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º avg items per order
        expected_avg = (3 + 1) / 2  # (order1: 3 items, order2: 1 item) / 2 orders
        self.assertEqual(report["avg_items_per_order"], expected_avg)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
        self.assertIn(101, report["top_customers"])
        self.assertIn(102, report["top_customers"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.assertIn("books", report["categories_stats"])
        self.assertIn("office", report["categories_stats"])
        self.assertIn("electronics", report["categories_stats"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.assertEqual(report["customer_segments"]["gold"], 1)
        self.assertEqual(report["customer_segments"]["regular"], 1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.assertGreater(len(report["debug_log"]), 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç—á—ë—Ç –±—ã–ª –≤—ã–≤–µ–¥–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω
        output = mock_stdout.getvalue()
        self.assertIn("COMPREHENSIVE E-COMMERCE REPORT", output)
        self.assertIn("Total Orders: 2", output)


class TestPrimitiveObsessionAndOtherSmells(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Primitive Obsession –∏ –¥—Ä—É–≥–∏–µ code smells"""

    def test_order_processor_payment_methods(self):
        """–¢–µ—Å—Ç Switch Statement –≤ OrderProcessor (Primitive Obsession)"""
        processor = OrderProcessor()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        self.assertTrue(processor.process_payment(100.0, "EUR", "CREDIT",
                                                  "1234567890123456", "12/25", "123"))
        self.assertTrue(processor.process_payment(100.0, "USD", "DEBIT",
                                                  "1234567890123456", "12/25", "123"))
        self.assertFalse(processor.process_payment(100.0, "INVALID", "CREDIT",
                                                   "1234567890123456", "12/25", "123"))

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        self.assertTrue(processor.process_payment(100.0, "EUR", "PAYPAL",
                                                  "1234567890123456", "12/25", "123"))
        self.assertFalse(processor.process_payment(100.0, "EUR", "BITCOIN",
                                                   "1234567890123456", "12/25", "123"))

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–∞—Ä—Ç—ã (–ø—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫)
        self.assertFalse(processor.process_payment(100.0, "EUR", "CREDIT",
                                                   "123", "12/25", "123"))  # –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä
        self.assertFalse(processor.process_payment(100.0, "EUR", "CREDIT",
                                                   "1234567890123456", "12/25", "12"))  # –∫–æ—Ä–æ—Ç–∫–∏–π CVV


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    unittest.main(verbosity=2)